<?php

/**
 * @file
 * Render cache module.
 */

/**
 * Implements hook_boot().
 */
function render_boost_boot() {
  $config = variable_get('render_boost_settings');
  if ($config['enable'] && $config['debug']) {
    // Init statistics data.
    global $_render_boost_devel;
    $_render_boost_devel['count'] = 0;
    $_render_boost_devel['checksum'] = 0;
    $_render_boost_devel['get'] = 0;
    $_render_boost_devel['store'] = 0;

    drupal_register_shutdown_function('render_boost_shutdown');
  }
}

/**
 * Disable devel output for AJAX queries.
 */
function render_boost_ajax_render_alter() {
  $GLOBALS['render_boost_debug_shutdown'] = FALSE;
}


/**
 * Implements hook_cron().
 */
function render_boost_cron() {
  $config = variable_get('render_boost_settings');
  if ($config['enable'] && (0 == $config['method'])) {
    $expire_after = $config['expire'] ? $config['expire'] : 3600;
    $dirpath = $config['file_storage_dir'] ? $config['file_storage_dir'] : 'public://render_cache';
    if (is_dir($dirpath)) {
    $dir = dir($dirpath);
      while (($entry = $dir->read()) !== FALSE) {
        if(is_file($dirpath . '/' . $entry)){
          $fileinfo = fileatime($dirpath . '/' . $entry);
          if($fileinfo < REQUEST_TIME - $expire_after){
            unlink($dirpath . '/' . $entry);
          }
        }
      }
      $dir->close();
    }
  }
}

/**
 * Implements hook_flush_caches().
 */
function render_boost_flush_caches() {
  $config = variable_get('render_boost_settings');
  if (0 == $config['method']) {
    // Clear files data.
    $dirpath = $config['file_storage_dir'] ? $config['file_storage_dir'] : 'public://render_cache';
    
    if (is_dir($dirpath)) {
    $dir = dir($dirpath);
      while (($entry = $dir->read()) !== FALSE) {
        if(is_file($dirpath . '/' . $entry)){
          $fileinfo = pathinfo($dirpath . '/' . $entry);
          if($fileinfo['extension'] == 'php'){
            unlink($dirpath . '/' . $entry);
          }
        }
      }
      $dir->close();
    }
  
    render_boost_cachedir_prepare();
  }

  return array('cache_render');
}

/**
 * Internal function to measure time for devel output.
 */
function render_boost_microtime_float() {

  list($usec, $sec) = explode(" ", microtime());
  return ((float) $usec + (float) $sec);
}

/**
 * Runs on shutdown to display developer information.
 *
 * Render_boost_boot() registers this function as a shutdown function.
 */
function render_boost_shutdown() {
  if (isset($GLOBALS['render_boost_debug_shutdown'])) {
    return;
  }
  global $_render_boost_devel;

  print '<div class="dev-render">Render boost called: ' . $_render_boost_devel['count'] . '
  <span class="checksum">checksum check: <b>' . round($_render_boost_devel['checksum'] * 1000) . 'ms</b></span>
  <span class="store">cache store: <b>' . round($_render_boost_devel['store'] * 1000) . 'ms</b></span>
  <span class="get">cache get: <b>' . round($_render_boost_devel['get'] * 1000) . 'ms</b></span>
  <span class="total">Total: <b>' . round(($_render_boost_devel['checksum'] + $_render_boost_devel['store'] + $_render_boost_devel['get']) * 1000) . 'ms</b></span>
  </div>';
}

/**
 * Generate checksum for render element.
 */
function render_boost_checksum($element) {
  if (empty($element)) {
    return FALSE;
  }

  global $_render_boost_devel;

  $now = render_boost_microtime_float();
  $_render_boost_devel['count']++;

  $serialize = serialize($element);
/*
  if (is_array($element)) {
    $need_sanitize = FALSE;
    $search_for = array('form_token', 'form_build_id', '#build_id', 'date');
    foreach ($search_for as $str) {
      if (FALSE !== strpos($serialize, '"'.$str.'"')) {
        $need_sanitize = TRUE;
        break;
      }
    }
    if ($need_sanitize) {
      $element_copy = $element;
      if (is_array($element_copy)) {
        if (isset($element_copy['form_token'])) {
          unset($element_copy['form_token']);
        }
        if (isset($element_copy['form_build_id'])) {
          unset($element_copy['form_build_id']);
        }
        if (isset($element_copy['#build_id'])) {
          unset($element_copy['#build_id']);
        }
        if (isset($element_copy['date'])) {
          unset($element_copy['date']);
        }
        if (isset($element_copy['#attached'])) {
          unset($element_copy['#attached']);
        }
      }

      array_walk_recursive($element_copy,'render_boost_sanitize_objects');
//      render_boost_sanitize_form($element_copy);
      $serialize = serialize($element_copy);

    }
  }*/

  $checksum = md5($serialize);
  $_render_boost_devel['checksum'] = $_render_boost_devel['checksum'] + (render_boost_microtime_float() - $now);
  return $checksum;
}

function render_boost_sanitize_form(&$element){
  static $deep;
  
  if(!$deep){
    $deep = 1;
  }else{
    $deep ++;
  }
  
  if($deep > 3){
    return;
  }
  
  if(is_array($element)){
    if (isset($element['form_token'])) {
      unset($element['form_token']);
    }
    if (isset($element['form_build_id'])) {
      unset($element['form_build_id']);
    }
    if (isset($element['#build_id'])) {
      unset($element['#build_id']);
    }
    if (isset($element['date'])) {
      unset($element['date']);
    }
    if (isset($element['#attached'])) {
      unset($element['#attached']);
    }
    foreach($element as $key => $value){
      render_boost_sanitize_form($value);
      $element[$key] = $value;
    }
  }
}

function render_boost_sanitize_objects(&$item, $key){
  if(is_object($item)){
    $item = render_boost_get_object_values($item);
    if(isset($item['created'])){
      unset($item['created']);
    }
  }
}

/**
 * Get first level properties from object.
 */
function render_boost_get_object_values($object) {
  $result = array();
  foreach ($object as $key => $val) {
    if (is_string($val) || is_bool($val) || is_numeric($val)) {
      $result[$key] = $val;
    }
  }
  return $result;
}

/**
 * Store cached data.
 */
function render_boost_store_cache($checksum, $data) {
  if (empty($data)) {
    // Do not cache empty data.
    return;
  }
  global $_render_boost_devel;
  $now = render_boost_microtime_float();
  // Construct the filepath where JS translation files are stored.
  static $config;

  if (empty($config)) {
    $config = variable_get('render_boost_settings');
  }

  if ($config['method']) {
    $expire_after = $config['expire'] ? $config['expire'] : 3600;
    $expire = REQUEST_TIME + $expire_after ;
    cache_set($checksum, $data, 'cache_render', $expire);
  }
  else {
    $dir = $config['file_storage_dir'] ? $config['file_storage_dir'] : 'public://render_cache';
    $dest = $dir . '/' . $checksum . '.php';
    $record = '<?php $cached_data = \'' . str_replace("'", "\'", $data) . '\';';
    file_unmanaged_save_data($record, $dest, FILE_EXISTS_REPLACE);
  }
  $_render_boost_devel['store'] = $_render_boost_devel['store'] + (render_boost_microtime_float() - $now);
}

function render_boost_store_checksums($checksum = NULL){
  static $checksums;
  
  if(!$checksums){
    $checksums = array();
  }
  
  if($checksum){
    $checksums[] = $checksum;
  }
  return $checksums;
}
/**
 * Get cache by checksum.
 */
function render_boost_get_cache($checksum) {

  global $_render_boost_devel;
  $now = render_boost_microtime_float();

  $checksums = &drupal_static('render_boost_get_cache');

//  drupal_set_message('check <pre>' . $checksum . 'count' . count($checksums). '</pre>');
  if (isset($checksums[$checksum])) {
   // drupal_set_message('cached <pre>' . print_r($checksum,true). '</pre>');
    return $checksums[$checksum];
  }else{
    drupal_set_message('not cached <pre>' . $checksum . 'count' . count($checksums)  . microtime() . '</pre>');
  }

  $return = FALSE;

  static $config;

  if (empty($config)) {
    $config = variable_get('render_boost_settings');
  }

  if ($config['method']) {
    if ($cache = cache_get($checksum, 'cache_render')) {
//      drupal_set_message('Call ' . $checksum . ' <pre>' . htmlentities( print_r($cache->data,true) ). '</pre>');

      if(isset($cache->data['js'])){
        foreach($cache->data['js'] as $key => $val){
          drupal_add_js($key, $val['type']);
        }
      }
      if(isset($cache->data['css'])){
        foreach($cache->data['css'] as $key => $val){
          drupal_add_css($key, $val);
        }
      }
      if(isset($cache->data['settings'])){
        foreach($cache->data['settings'] as $key => $val){
          drupal_add_js($val, 'setting');
        }
      }
/*      if(isset($cache->data['checksums']) && !empty($cache->data['checksums'])){
        $cache->data['checksums'];
        $subcaches = cache_get_multiple($cache->data['checksums'], 'cache_render');
//        drupal_set_message('<pre>'. htmlentities(print_r($subcaches,true)) . '</pre>');
        foreach($subcaches as $subsum => $value){
          $checksums[$subsum] = $value;
        }

      }*/
      
      $return = '<!-- cached:' . $checksum. ' -->' . $cache->data['output'] . '<!-- /cached:' . $checksum. ' -->';
    }
  }
  else {
    $dir = $config['file_storage_dir'] ? $config['file_storage_dir'] : 'public://render_cache';
    $dest = $dir . '/' . $checksum . '.php';
    if (is_file($dest)) {
      include_once $dest;
      if (isset($cached_data)) {
        $return = '<cached id="' . $checksum. '">' . $cached_data . '</cached>';
      }
    }

  }
  $checksums[$checksum] = $return;
  render_boost_store_checksums($checksum);
  $_render_boost_devel['get'] = $_render_boost_devel['get'] + (render_boost_microtime_float() - $now);

  return $return ;
}

/**
 * Process form states and attachments fo cached data.
 */
function render_boost_enable_forms_states_attaches($elements) {
//  drupal_set_message('<pre>' . print_r($elements,true). '</pre>');
  if (!empty($elements['#states'])) {
//    drupal_process_states($elements);
  }

  if (!empty($elements['#attached'])) {
//    drupal_process_attached($elements);
  }
  foreach ($elements as $key => $val) {
    if (is_array($val)) {
      render_boost_enable_forms_states_attaches($val);
    }
  }
}

/**
 * Main function. Replace drupal_render function.
 */
function render_boost_drupal_render(&$elements) {
 
  
  $output = render_boost_render($elements);
  preg_match_all('/<!-- render_boost_form:(.*?):(.*?) --\>/', $output, $matches);
  
  if (!empty($matches[0])) {
    $form_storage = render_boost_form_storage();
    
    foreach ($matches[2] as $key => $form_serial_number) {
      $rendered_element = $form_storage[$form_serial_number]['render'];
      $output = str_replace($matches[0][$key], $rendered_element, $output);
    }
  }
  
  return $output;
}

/**
 * Multy time used render.
 */
function render_boost_render(&$elements) {

//  drupal_set_message('<pre>' . print_r($elements,true). '</pre>');
  
  $empty_array = array(
    '#printed' => FALSE,
  );

  if ($elements === $empty_array) {
    return "";
  }
  
  if (isset($elements['#markup'])) {
    // No cache for markup.
    return render_boost_original_render($elements);
  }
  
  if (isset($elements['#ajax'])) {
    // No cache for markup.
    return render_boost_original_render($elements);
  }

  if (isset($elements['#type']) && $elements['#type'] == 'scripts') {
    // No cache for window.Drupal = ....
    return render_boost_original_render($elements);
  }

  if (isset($elements['#name']) && $elements['#name'] == 'form_build_id') {
    // No cache for form_build_id
    return render_boost_original_render($elements);
  }

  // Early-return nothing if user does not have access.
  if (empty($elements) || (isset($elements['#access']) && !$elements['#access'])) {
    return '';
  }

  // Do not print elements twice.
  if (!empty($elements['#printed'])) {
    return '';
  }

  if ($check_sum = render_boost_checksum($elements)) {
//    drupal_set_message('checksum <pre>' . $check_sum. ' <pre>' . htmlentities( print_r($elements,true) ). '</pre>');

    $output = render_boost_get_cache($check_sum);
    if (FALSE === $output) {
//      drupal_set_message('checksum <pre>' . $check_sum. ' <pre>' . htmlentities( print_r($elements,true) ). '</pre>');
      
      $scripts_before = drupal_add_js();
      $css_before = drupal_add_css();
      $output = render_boost_original_render($elements);
      $scripts_after = drupal_add_js();
      $css_after = drupal_add_css();
      if (!empty($output)) {
        $data = array();
        $data['output'] = $output;
        $scripts_keys_before = array_keys($scripts_before);
        $scripts_keys_after = array_keys($scripts_after);

        if($diff = array_diff($scripts_keys_after,$scripts_keys_before)){
          foreach($diff as $key){
            $data['js'][$key] = $scripts_after[$key];
          }
        }
        
        $data_keys_before = array_keys($scripts_before['settings']['data']);
        $data_keys_after = array_keys($scripts_after['settings']['data']);

        if($diff = array_diff($data_keys_after,$data_keys_before)){
          foreach($diff as $key){
            $data['settings'][$key] = $scripts_after['settings']['data'][$key];
          }
        }
        
        $css_keys_before = array_keys($css_before);
        $css_keys_after = array_keys($css_after);
        
        if($diff = array_diff($css_keys_after,$css_keys_before)){
          foreach($diff as $key){
            $data['css'][$key] = $css_after[$key];
          }
        }
        render_boost_store_cache($check_sum, $data);
        
//        drupal_set_message('store ' . $check_sum . '  <pre>b'. htmlentities(print_r($data,true)) . '</pre>');
      } else{
       // drupal_set_message(' not store ' . $check_sum . '  <pre>b'. print_r($elements,true) . '</pre>');
      }
    }
    else {
     //we have it 
    
//      drupal_set_message(' we have it ' . $check_sum . '  <pre>b'. print_r($elements,true) . htmlentities($output) . '</pre>');
      //render_boost_enable_forms_states_attaches($elements);
    }
  }
  else {
    $output = render_boost_original_render($elements);
  }
  return $output;
}

/**
 * Replace place holders (form_token, form_build_id) with actual data.
 */
function render_boost_replace_dynamic_content($elements, &$output) {
  
  drupal_set_message('TEST <pre>'. print_r($elements,true) . '</pre>');

  preg_match_all('/<!-- REPLACE: (.*?) --\>/', $output, $matches);

  if (!empty($matches[0])) {

    foreach ($matches[1] as $key => $name) {
      if ($element = render_boost_get_form_element($name, $elements)) {
        if (!empty($element['#printed'])) {
          $rendered_element = $element['#children'];
        }
        else {
          $rendered_element = render_boost_original_render($element);
        }
        $output = str_replace($matches[0][$key], $rendered_element, $output);
      }
    }
  }
}

/**
 * Used by render_boost_replace_dynamic_content to get data for element by name.
 */
function render_boost_get_form_element($name, $elements) {
  if (isset($elements['#type']) && $elements['#type'] == 'form') {
    if (isset($elements[$name])) {
      return $elements[$name];
    }
  }
  else {
    foreach ($elements as $variable => $element) {
      if (is_array($element) && isset($element[$name])) {
        return $element[$name];
      }
    }
  }
}

/**
 * Alter Performace page settings to add Render Cache settings.
 */
function render_boost_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {

  $config = variable_get('render_boost_settings');
  $form['render_boost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Render boost'),
    '#description' => t('Render cache helps to avoid needless re-rendering of page elements by caching results.'),
    '#tree' => TRUE,
  );

  $form['render_boost']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t("Enable render cache."),
    '#default_value' => $config['enable'],
  );

  $form['render_boost']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      // Hide the query log settings when not displaying query log.
      'invisible' => array(
        'input[name="render_boost[enable]"]' => array('checked' => FALSE),
      ),
    ),
  );

  $period = drupal_map_assoc(array(1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');
  $form['render_boost']['settings']['expire'] = array(
    '#type' => 'select',
    '#title' => t("Cache expiration time"),
    '#options' => $period,
    '#default_value' => $config['expire'] ? $config['expire'] : 3600 ,
    '#description' => t('Clean cache after this period.'),
  );

  $form['render_boost']['settings']['method'] = array(
    '#type' => 'select',
    '#title' => t("Cache method"),
    '#options' => array(
      0 => t('File storage'),
      1 => t('Database storage'),
    ),
    '#default_value' => $config['method'],
  );

  $form['render_boost']['settings']['file_storage_description'] = array(
    '#type' => 'item',
    '#states' => array(
      'visible' => array(
        'select[name="render_boost[settings][method]"]' => array('value' => 0),
      ),
    ),
    '#description' => t('Please make sure that you properly configured cron.'),
  );

  $form['render_boost']['settings']['file_storage_dir'] = array(
    '#type' => 'textfield',
    '#states' => array(
      'visible' => array(
        'select[name="render_boost[settings][method]"]' => array('value' => 0),
      ),
    ),
    '#default_value' => $config['file_storage_dir'] ? $config['file_storage_dir'] : 'public://render_cache',
    '#description' => t('Directory to store cache files.'),
  );

  $form['render_boost']['settings']['database_storage_description'] = array(
    '#type' => 'item',
    '#states' => array(
      'visible' => array(
        'select[name="render_boost[settings][method]"]' => array('value' => 1),
      ),
    ),
    '#description' => t('Cached results cleaned after 1 hour by cache clean process.'),
  );

  $form['render_boost']['settings']['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t("Enable debug output."),
    '#default_value' => $config['debug'],
  );

  $form['#submit'][] = 'render_boost_system_settings_submit';
}

/**
 * Save Render Cache settings.
 */
function render_boost_system_settings_submit($form, &$form_state) {
  $config = variable_get('render_boost_settings');
  $config['enable'] = $form_state['values']['render_boost']['enable'];
  $config['expire'] = $form_state['values']['render_boost']['settings']['expire'];
  $config['debug'] = $form_state['values']['render_boost']['settings']['debug'];
  $config['method'] = $form_state['values']['render_boost']['settings']['method'];
  $config['file_storage_dir'] = $form_state['values']['render_boost']['settings']['file_storage_dir'];

  variable_set('render_boost_settings', $config);

  if (0 == $form_state['values']['render_boost']['settings']['method']) {
    render_boost_cachedir_prepare();
  }
}

/**
 * Prepare directory for filecache mode.
 */
function render_boost_cachedir_prepare() {
  $config = variable_get('render_boost_settings');
  $dir = $config['file_storage_dir'] ? $config['file_storage_dir'] : 'public://render_cache';

  file_prepare_directory($dir, FILE_CREATE_DIRECTORY);
  $htaccess_file = $dir . '/.htaccess';

  if (!is_file($htaccess_file)) {
    $htaccess_data = "order deny,allow\ndeny from all";
    file_unmanaged_save_data($htaccess_data, $htaccess_file, FILE_EXISTS_REPLACE);
  }
}


/**
 * Original drupal_render function except cache functions.
 */
function render_boost_original_render(&$elements) {
  // Early-return nothing if user does not have access.
  if (empty($elements) || (isset($elements['#access']) && !$elements['#access'])) {
    return '';
  }

  // Do not print elements twice.
  if (!empty($elements['#printed'])) {
    return '';
  }

  // If #markup is set, ensure #type is set. This allows to specify just #markup
  // on an element without setting #type.
  if (isset($elements['#markup']) && !isset($elements['#type'])) {
    $elements['#type'] = 'markup';
  }

  // If the default values for this element have not been loaded yet, populate
  // them.
  if (isset($elements['#type']) && empty($elements['#defaults_loaded'])) {
    $elements += element_info($elements['#type']);
  }

  // Make any final changes to the element before it is rendered. This means
  // that the $element or the children can be altered or corrected before the
  // element is rendered into the final text.
  if (isset($elements['#pre_render'])) {
    foreach ($elements['#pre_render'] as $function) {
      $elements = $function($elements);
    }
  }

  // Allow #pre_render to abort rendering.
  if (!empty($elements['#printed'])) {
    return '';
  }

  // Get the children of the element, sorted by weight.
  $children = element_children($elements, TRUE);

  // Initialize this element's #children, unless a #pre_render callback already
  // preset #children.
  if (!isset($elements['#children'])) {
    $elements['#children'] = '';
  }
  // Call the element's #theme function if it is set. Then any children of the
  // element have to be rendered there.
  if (isset($elements['#theme'])) {
    $elements['#children'] = theme($elements['#theme'], $elements);
  }
  // If #theme was not set and the element has children, render them now.
  // This is the same process as drupal_render_children() but is inlined
  // for speed.
  if ($elements['#children'] == '') {
    foreach ($children as $key) {
      $elements['#children'] .= render_boost_original_render($elements[$key]);
    }
  }

  // Let the theme functions in #theme_wrappers add markup around the rendered
  // children.
  if (isset($elements['#theme_wrappers'])) {
    foreach ($elements['#theme_wrappers'] as $theme_wrapper) {
      $elements['#children'] = theme($theme_wrapper, $elements);
    }
  }

  // Filter the outputted content and make any last changes before the
  // content is sent to the browser. The changes are made on $content
  // which allows the output'ed text to be filtered.
  if (isset($elements['#post_render'])) {
    foreach ($elements['#post_render'] as $function) {
      $elements['#children'] = $function($elements['#children'], $elements);
    }
  }

  // Add any JavaScript state information associated with the element.
  if (!empty($elements['#states'])) {
    drupal_process_states($elements);
  }

  // Add additional libraries, CSS, JavaScript an other custom
  // attached data associated with this element.
  if (!empty($elements['#attached'])) {
    drupal_process_attached($elements);
  }

  $prefix = isset($elements['#prefix']) ? $elements['#prefix'] : '';
  $suffix = isset($elements['#suffix']) ? $elements['#suffix'] : '';
  $output = $prefix . $elements['#children'] . $suffix;

  $elements['#printed'] = TRUE;

  return $output;
}

function render_boost_form_storage($form_id = NULL, $form_render = NULL){
  static $form_storage;
  if($form_render){
      //drupal_set_message('form_storage ' . $form_id);
    if ($cache = cache_get($form_id, 'cache_render')) {
      $subcaches = cache_get_multiple($cache->data, 'cache_render');
//      drupal_set_message('<pre>' . print_r($cache->data,true). '</pre>' . microtime());

      $checksums = &drupal_static('render_boost_get_cache');
      
      $tmplist = array();
      foreach($cache->data as $form_chksum){
        $tmplist[$form_chksum] = $form_chksum;
      }
      foreach($subcaches as $checksum => $subcache){
        unset($tmplist[$checksum]);
        
        if(isset($checksums[$checksum])){
          //drupal_set_message('Already cached <pre>' . print_r($checksums[$checksum], true). '</pre>');
          continue;
        }
        $checksums[$checksum] = $subcache->data['output'];
        if(isset($subcache->data['js'])){
          foreach($subcache->data['js'] as $key => $val){
            drupal_add_js($key, $val['type']);
          }
        }
        if(isset($subcache->data['css'])){
          foreach($subcache->data['css'] as $key => $val){
            drupal_add_css($key, $val);
          }
        }
        if(isset($subcache->data['settings'])){
          foreach($subcache->data['settings'] as $key => $val){
            drupal_add_js($val, 'setting');
          }
        }
      }
      
      foreach($tmplist as $form_chksum){
        $checksums[$form_chksum] = '';
      }
      $form_storage[] = array(
        'elements' => $form_render,
        'render' => render_boost_original_render($form_render)
      );
    }else{
    
      $before = render_boost_store_checksums();
      $form_storage[] = array(
        'elements' => $form_render,
        'render' => render_boost_original_render($form_render)
      );
      $after = render_boost_store_checksums();
      
      if($diff = array_diff($after,$before)){
        $config = variable_get('render_boost_settings');
        $expire_after = $config['expire'] ? $config['expire'] : 3600;
        $expire = REQUEST_TIME + $expire_after ;
        cache_set($form_id, $diff, 'cache_render', $expire);
      }
    }

//    $checksums = &drupal_static('render_boost_get_cache');
//    drupal_set_message('<pre>' . print_r($checksums,true). '</pre>');

    
    return count($form_storage) - 1;
  }else{
    return $form_storage;
  }
}
